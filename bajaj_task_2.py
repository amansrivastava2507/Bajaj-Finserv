# -*- coding: utf-8 -*-
"""Bajaj Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xThworuSLiiR6YftU44eDN_5u9mrIJ1n
"""

#ques 1
import json
import pandas as pd

with open('DataEngineeringQ2.json', 'r') as file:
    data = json.load(file)

appointments = []
for appointment in data:
    patient_details = appointment.get('patientDetails', {})  
    appointment_data = {
        'appointmentId': appointment['appointmentId'],
        'phoneNumber': appointment['phoneNumber'],
        'firstName': patient_details.get('firstName'),
        'lastName': patient_details.get('lastName'),
        'gender': 'male' if patient_details.get('gender') == 'M' else 'female' if patient_details.get('gender') == 'F' else 'others',
        'DOB': patient_details.get('birthDate'),
        'medicines': appointment['consultationData'].get('medicines')
    }
    appointments.append(appointment_data)

df = pd.DataFrame(appointments)
df['fullName'] = df['firstName'] + ' ' + df['lastName']
    
print(df[['appointmentId', 'phoneNumber', 'firstName', 'lastName', 'gender', 'DOB', 'medicines', 'fullName']])

#ques2
import json

with open('DataEngineeringQ2.json') as file:
    json_data = json.load(file)


selected_data = []
for appointment in json_data:
    fullName = appointment['patientDetails']['firstName'] + ' ' + appointment['patientDetails']['lastName']

    selected_data.append({
        'appointmentId': appointment['appointmentId'],
        'phoneNumber': appointment['phoneNumber'],
        'firstName': appointment['patientDetails']['firstName'],
        'lastName': appointment['patientDetails']['lastName'],
        'fullName': fullName,
        'gender': appointment['patientDetails'].get('gender'),
        'DOB': appointment['patientDetails'].get('birthDate'),
        'medicines': appointment['consultationData']['medicines']
    })


for item in selected_data:
    print(item)

#ques 3
import re
import json

# Read the JSON file
with open('DataEngineeringQ2.json') as file:
    data = json.load(file)

# Iterate over appointments
for appointment in data:
    # Extract relevant details
    appointment_id = appointment.get('appointmentId')
    phone_number = appointment['phoneNumber']
    first_name = appointment['patientDetails']['firstName']
    last_name = appointment['patientDetails']['lastName']
    gender = appointment['patientDetails'].get('gender')
    birth_date = appointment['patientDetails'].get('birthDate')
    medicines = appointment['consultationData']['medicines']

    # Create fullName
    full_name = f"{first_name} {last_name}"

    # Validate phone number
    def is_valid_phone_number(number):
        number = re.sub(r'\D', '', number)
        if re.match(r'^((\+|0{0,2})91)?[6-9]\d{9}$', number):
            return True
        else:
            return False

    # Check if phone number is valid
    is_valid_mobile = is_valid_phone_number(phone_number)

    # Print appointment details
    print(f"Appointment ID: {appointment_id}")
    print(f"Phone Number: {phone_number}")
    print(f"Full Name: {full_name}")
    print(f"Gender: {gender}")
    print(f"Birth Date: {birth_date}")
    print(f"Medicines: {medicines}")
    print(f"Is Valid Mobile: {is_valid_mobile}")
    print("-------------------------------------")

#ques 4
import re
import json
import hashlib

# Read the JSON file
with open('DataEngineeringQ2.json') as file:
    data = json.load(file)

# Iterate over appointments
for appointment in data:
    # Extract relevant details
    appointment_id = appointment['appointmentId']
    phone_number = appointment['phoneNumber']
    first_name = appointment['patientDetails']['firstName']
    last_name = appointment['patientDetails']['lastName']
    gender = appointment['patientDetails'].get('gender')
    birth_date = appointment['patientDetails'].get('birthDate')
    medicines = appointment['consultationData']['medicines']

    # Create fullName
    full_name = f"{first_name} {last_name}"

    # Validate phone number
    def is_valid_phone_number(number):
        number = re.sub(r'\D', '', number)
        if re.match(r'^((\+|0{0,2})91)?[6-9]\d{9}$', number):
            return True
        else:
            return False

    # Check if phone number is valid
    is_valid_mobile = is_valid_phone_number(phone_number)

    # Hash the valid phone number
    def hash_phone_number(number):
        number = re.sub(r'\D', '', number)
        if is_valid_phone_number(number):
            return hashlib.sha256(number.encode()).hexdigest()
        else:
            return None

    # Calculate phoneNumberHash
    phone_number_hash = hash_phone_number(phone_number)

    # Print appointment details
    print(f"Appointment ID: {appointment_id}")
    print(f"Phone Number: {phone_number}")
    print(f"Full Name: {full_name}")
    print(f"Gender: {gender}")
    print(f"Birth Date: {birth_date}")
    print(f"Medicines: {medicines}")
    print(f"Is Valid Mobile: {is_valid_mobile}")
    print(f"Phone Number Hash: {phone_number_hash}")
    print("-------------------------------------")

#ques 5
import re
import json
import datetime

# Read the JSON file
with open('DataEngineeringQ2.json') as file:
    data = json.load(file)

# Iterate over appointments
for appointment in data:
    # Extract relevant details
    appointment_id = appointment['appointmentId']
    phone_number = appointment['phoneNumber']
    first_name = appointment['patientDetails']['firstName']
    last_name = appointment['patientDetails']['lastName']
    gender = appointment['patientDetails'].get('gender')
    birth_date = appointment['patientDetails'].get('birthDate')
    medicines = appointment['consultationData']['medicines']

    # Create fullName
    full_name = f"{first_name} {last_name}"

    # Validate phone number
    def is_valid_phone_number(number):
        number = re.sub(r'\D', '', number)
        if re.match(r'^((\+|0{0,2})91)?[6-9]\d{9}$', number):
            return True
        else:
            return False

   
    is_valid_mobile = is_valid_phone_number(phone_number)

    def hash_phone_number(number):
        number = re.sub(r'\D', '', number)
        if is_valid_phone_number(number):
            return hashlib.sha256(number.encode()).hexdigest()
        else:
            return None

    phone_number_hash = hash_phone_number(phone_number)

   
    def calculate_age(dob):
        if dob is None:
            return None
        else:
            dob = datetime.datetime.strptime(dob, "%Y-%m-%dT%H:%M:%S.%fZ")
            today = datetime.datetime.now()
            age = today.year - dob.year
            if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
                age -= 1
            return age

    age = calculate_age(birth_date)

    print(f"Appointment ID: {appointment_id}")
    print(f"Phone Number: {phone_number}")
    print(f"Full Name: {full_name}")
    print(f"Gender: {gender}")
    print(f"Birth Date: {birth_date}")
    print(f"Medicines: {medicines}")
    print(f"Is Valid Mobile: {is_valid_mobile}")
    print(f"Phone Number Hash: {phone_number_hash}")
    print(f"Age: {age}")
    print("-------------------------------------")

#ques 6
import re
import json
import datetime


with open('DataEngineeringQ2.json') as file:
    data = json.load(file)

appointment_data = {}

for appointment in data:
    
    appointment_id = appointment['appointmentId']
    phone_number = appointment['phoneNumber']
    first_name = appointment['patientDetails']['firstName']
    last_name = appointment['patientDetails']['lastName']
    gender = appointment['patientDetails'].get('gender')
    birth_date = appointment['patientDetails'].get('birthDate')
    medicines = appointment['consultationData']['medicines']

    
    full_name = f"{first_name} {last_name}"

    
    def is_valid_phone_number(number):
        number = re.sub(r'\D', '', number)
        if re.match(r'^((\+|0{0,2})91)?[6-9]\d{9}$', number):
            return True
        else:
            return False

    
    is_valid_mobile = is_valid_phone_number(phone_number)

    
    def hash_phone_number(number):
        number = re.sub(r'\D', '', number)
        if is_valid_phone_number(number):
            return hashlib.sha256(number.encode()).hexdigest()
        else:
            return None

    
    phone_number_hash = hash_phone_number(phone_number)

    
    def calculate_age(dob):
        if dob is None:
            return None
        else:
            dob = datetime.datetime.strptime(dob, "%Y-%m-%dT%H:%M:%S.%fZ")
            today = datetime.datetime.now()
            age = today.year - dob.year
            if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
                age -= 1
            return age

    
    age = calculate_age(birth_date)

   
    no_of_medicines = len(medicines)

    
    no_of_active_medicines = sum(1 for medicine in medicines if medicine['isActive'] is True)

    
    no_of_inactive_medicines = sum(1 for medicine in medicines if medicine['isActive'] is False)

    
    appointment_data[appointment_id] = {
        'Phone Number': phone_number,
        'Full Name': full_name,
        'Gender': gender,
        'Birth Date': birth_date,
        'Medicines': medicines,
        'Is Valid Mobile': is_valid_mobile,
        'Phone Number Hash': phone_number_hash,
        'Age': age,
        'No. of Medicines': no_of_medicines,
        'No. of Active Medicines': no_of_active_medicines,
        'No. of Inactive Medicines': no_of_inactive_medicines
    }


for appointment_id, appointment_info in appointment_data.items():
    print(f"Appointment ID: {appointment_id}")
    print(f"Phone Number: {appointment_info['Phone Number']}")
    print(f"Full Name: {appointment_info['Full Name']}")
    print(f"Gender: {appointment_info['Gender']}")

#ques 2
import json
import re
import hashlib

with open('DataEngineeringQ2.json') as file:
    json_data = json.load(file)


def is_valid_mobile(phone_number):

    pattern = r'^(?:\+91|91)?[6-9]\d{9}$'
    return bool(re.match(pattern, phone_number))

def calculate_age(dob):
    if dob is None:
        return None

    dob = datetime.fromisoformat(dob[:-5])
    today = datetime.now()
    age = today.year - dob.year


    if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
        age -= 1

    return age

def calculate_hash(data):
    return hashlib.sha256(data.encode()).hexdigest()


selected_data = []
for appointment in json_data:
    medicines = appointment['consultationData']['medicines']
    no_of_medicines = len(medicines)
    no_of_active_medicines = sum(1 for medicine in medicines if medicine.get('IsActive', False))
    no_of_inactive_medicines = no_of_medicines - no_of_active_medicines

    active_medicine_names = [medicine['medicineName'] for medicine in medicines if medicine.get('IsActive', False)]
    medicine_names = ', '.join(active_medicine_names)

    selected_data.append({
        'appointmentId': appointment['appointmentId'],
        'phoneNumber': appointment['phoneNumber'],
        'firstName': appointment['patientDetails']['firstName'],
        'lastName': appointment['patientDetails']['lastName'],
        'fullName': appointment['patientDetails']['firstName'] + ' ' + appointment['patientDetails']['lastName'],
        'isValidMobile': is_valid_mobile(appointment['phoneNumber']),
        'phoneNumberHash': calculate_hash(appointment['phoneNumber']) if is_valid_mobile(appointment['phoneNumber']) else None,
        'gender': appointment['patientDetails'].get('gender'),
        'DOB': appointment.get('birthDate'),
        'Age': calculate_age(appointment.get('birthDate')),
        'medicines': medicines,
        'noOfMedicines': no_of_medicines,
        'noOfActiveMedicines': no_of_active_medicines,
        'noOfInactiveMedicines': no_of_inactive_medicines,
        'medicineNames': medicine_names
    })


for item in selected_data:
    print(item)

#task 2
#ques 1
import json
import re
import hashlib

with open('DataEngineeringQ2.json') as file:
    json_data = json.load(file)


def is_valid_mobile(phone_number):

    pattern = r'^(?:\+91|91)?[6-9]\d{9}$'
    return bool(re.match(pattern, phone_number))

def calculate_age(dob):
    if dob is None:
        return None

    dob = datetime.fromisoformat(dob[:-5])
    today = datetime.now()
    age = today.year - dob.year


    if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
        age -= 1

    return age

def calculate_hash(data):
    return hashlib.sha256(data.encode()).hexdigest()


selected_data = []
for appointment in json_data:
    medicines = appointment['consultationData']['medicines']
    no_of_medicines = len(medicines)
    no_of_active_medicines = sum(1 for medicine in medicines if medicine.get('IsActive', False))
    no_of_inactive_medicines = no_of_medicines - no_of_active_medicines

    active_medicine_names = [medicine['medicineName'] for medicine in medicines if medicine.get('IsActive', False)]
    medicine_names = ', '.join(active_medicine_names)

    selected_data.append({
        'appointmentId': appointment['appointmentId'],
        'phoneNumber': appointment['phoneNumber'],
        'firstName': appointment['patientDetails']['firstName'],
        'lastName': appointment['patientDetails']['lastName'],
        'fullName': appointment['patientDetails']['firstName'] + ' ' + appointment['patientDetails']['lastName'],
        'isValidMobile': is_valid_mobile(appointment['phoneNumber']),
        'phoneNumberHash': calculate_hash(appointment['phoneNumber']) if is_valid_mobile(appointment['phoneNumber']) else None,
        'gender': appointment['patientDetails'].get('gender'),
        'DOB': appointment.get('birthDate'),
        'Age': calculate_age(appointment.get('birthDate')),
        'medicines': medicines,
        'noOfMedicines': no_of_medicines,
        'noOfActiveMedicines': no_of_active_medicines,
        'noOfInactiveMedicines': no_of_inactive_medicines,
        'medicineNames': medicine_names
    })


for item in selected_data:
    print(item)
import pandas as pd
import json
import re
import hashlib


with open('DataEngineeringQ2.json') as file:
    json_data = json.load(file)


def is_valid_mobile(phone_number):

    pattern = r'^(?:\+91|91)?[6-9]\d{9}$'
    return bool(re.match(pattern, phone_number))

def calculate_age(dob):
    if dob is None:
        return None

    dob = datetime.fromisoformat(dob[:-5])
    today = datetime.now()
    age = today.year - dob.year


    if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
        age -= 1

    return age

def calculate_hash(data):
    return hashlib.sha256(data.encode()).hexdigest()

selected_data = []


for appointment in json_data:
    appointment_data = {
        'appointmentId': appointment['appointmentId'],
        'fullName': appointment['patientDetails']['firstName'] + ' ' + appointment['patientDetails']['lastName'],
        'phoneNumber': appointment['phoneNumber'],
        'isValidMobile': is_valid_mobile(appointment['phoneNumber']),
        'phoneNumberHash': calculate_hash(appointment['phoneNumber']) if is_valid_mobile(appointment['phoneNumber']) else None,
        'gender': appointment['patientDetails'].get('gender'),
        'DOB': appointment.get('birthDate'),
        'Age': calculate_age(appointment.get('birthDate')),
        'noOfMedicines': len(appointment['consultationData']['medicines']),
        'noOfActiveMedicines': sum(1 for medicine in appointment['consultationData']['medicines'] if medicine.get('IsActive', False)),
        'noOfInActiveMedicines': sum(1 for medicine in appointment['consultationData']['medicines'] if not medicine.get('IsActive', False)),
        'MedicineNames': ', '.join([medicine['medicineName'] for medicine in appointment['consultationData']['medicines'] if medicine.get('IsActive', False)])
    }
    selected_data.append(appointment_data)


df = pd.DataFrame(selected_data)


df.to_csv('output.csv', sep='~', index=False)

#ques 2 part a
import re
import json
import datetime

# Read the JSON file
with open('DataEngineeringQ2.json') as file:
    data = json.load(file)

# Initialize variables
age_sum = 0
gender_count = {'male': 0, 'female': 0, 'other': 0}
valid_phone_numbers = 0
appointment_count = 0
medicine_count = 0
active_medicine_count = 0

# Iterate over appointments
for appointment in data:
    # Extract relevant details
    gender = appointment['patientDetails'].get('gender')
    birth_date = appointment['patientDetails'].get('birthDate')
    phone_number = appointment['phoneNumber']
    medicines = appointment['consultationData']['medicines']

    # Calculate Age
    def calculate_age(dob):
        if dob is None:
            return None
        else:
            dob = datetime.datetime.strptime(dob, "%Y-%m-%dT%H:%M:%S.%fZ")
            today = datetime.datetime.now()
            age = today.year - dob.year
            if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
                age -= 1
            return age

    # Calculate Age based on DOB
    age = calculate_age(birth_date)
    if age is not None:
        age_sum += age

    # Count gender if not None
    if gender is not None:
        if gender.lower() == 'male':
            gender_count['male'] += 1
        elif gender.lower() == 'female':
            gender_count['female'] += 1
        else:
            gender_count['other'] += 1

    # Validate phone number
    def is_valid_phone_number(number):
        number = re.sub(r'\D', '', number)
        if re.match(r'^((\+|0{0,2})91)?[6-9]\d{9}$', number):
            return True
        else:
            return False

    # Check if phone number is valid
    if is_valid_phone_number(phone_number):
        valid_phone_numbers += 1

    # Count appointments
    appointment_count += 1

    # Count medicines
    medicine_count += len(medicines)

    # Count active medicines
    active_medicine_count += sum(1 for medicine in medicines if medicine['isActive'])

# Calculate average age
average_age = age_sum / appointment_count if appointment_count > 0 else 0

# Create aggregated data dictionary
aggregated_data = {
    'Age': average_age,
    'gender': gender_count,
    'validPhoneNumbers': valid_phone_numbers,
    'appointments': appointment_count,
    'medicines': medicine_count,
    'activeMedicines': active_medicine_count
}

# Export aggregated data to JSON file
with open('aggregated_data.json', 'w') as file:
    json.dump(aggregated_data, file, indent=4)

#ques 2 part b
import matplotlib.pyplot as plt
gender_counts = {
    "Male": 20,
    "Female": 15,
    "Others": 5
}

plt.pie(gender_counts.values(), labels=gender_counts.keys(), autopct='%1.1f%%')

plt.title("Appointments by Gender")

plt.show()